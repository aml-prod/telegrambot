from __future__ import annotations

import io
from typing import Final

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BufferedInputFile, Message

from .config import load_settings
from .image_utils import render_text_on_image_bottom


class Awaiting(StatesGroup):
    caption = State()


router: Final[Router] = Router()


@router.message(CommandStart())
async def on_start(message: Message) -> None:
    await message.answer(
        "‚ú® –ü—Ä–∏–≤–µ—Ç!\n\n"
        "1) –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n"
        "2) –ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —è –≤–µ—Ä–Ω—É —ç—Ç–æ –∂–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤–Ω—É—Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
        "–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî —è –Ω–∞—Ä–∏—Å—É—é –ø–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help",
    )


@router.message(F.text == "/help")
async def on_help(message: Message) -> None:
    await message.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
        "‚Äî –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n"
        "‚Äî –ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —è –ø—Ä–∏—à–ª—é —Ç–æ –∂–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –Ω–∞ –Ω—ë–º\n\n"
        "–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: —è –Ω–∞—Ä–∏—Å—É—é –µ—ë –≤–Ω–∏–∑—É.",
    )


@router.message(F.photo & F.caption)
async def on_photo_with_caption(message: Message) -> None:
    largest = message.photo[-1]
    buf = io.BytesIO()
    await message.bot.download(largest, destination=buf)
    result = render_text_on_image_bottom(buf.getvalue(), message.caption or "")
    await message.answer_photo(photo=BufferedInputFile(result, filename="result.jpg"))


@router.message(F.photo)
async def on_photo(message: Message, state: FSMContext) -> None:
    largest = message.photo[-1]
    await state.update_data(photo_file_id=largest.file_id)
    await state.set_state(Awaiting.caption)
    await message.answer(
        "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —è –Ω–∞—Ä–∏—Å—É—é –µ–≥–æ —Å–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
    )


@router.message(StateFilter(Awaiting.caption))
async def on_any_message_in_caption_state(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    file_id = data.get("photo_file_id")
    if not file_id:
        await state.clear()
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    if not message.text:
        await message.answer("–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚úçÔ∏è")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø–æ file_id
    file = await message.bot.get_file(file_id)
    buf = io.BytesIO()
    await message.bot.download(file, destination=buf)

    result = render_text_on_image_bottom(buf.getvalue(), message.text)
    await message.answer_photo(photo=BufferedInputFile(result, filename="result.jpg"))
    await state.clear()


@router.message(StateFilter(None))
async def on_text_without_photo(message: Message) -> None:
    if message.text:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ ‚úçÔ∏è")


async def main() -> None:
    settings = load_settings()

    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    await bot.set_my_commands(
        [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        ]
    )

    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()
